<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN" class="no-js">
<!-- BEGIN HEAD -->

<head>
        <link rel="canonical" href="https://vlessgithub.github.io/news/article-105978.htm" />
    <meta charset="utf-8" />
    <title>认证与授权流程与spring boot整合 spring security</title>
        <meta name="description" content="1.1 spring security的作用 Spring Security所解决的问题就是安全访问控制，而安全访问控制功能其实就是对所有进入系统的请求进行拦截，校验每个请求是否能够访问它所期望的资源" />
        <link rel="icon" href="/assets/website/img/vlessgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Vless Github机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vlessgithub.github.io/news/article-105978.htm" />
    <meta property="og:site_name" content="Vless Github机场订阅官网" />
    <meta property="og:title" content="认证与授权流程与spring boot整合 spring security" />
    <meta property="og:image" content="https://vlessgithub.github.io/uploads/20240903/98d7a176796dfbae180d18d83464e71f.webp" />
        <meta property="og:release_date" content="2025-04-28T09:38:00" />
    <meta property="og:updated_time" content="2025-04-28T09:38:00" />
        <meta property="og:description" content="1.1 spring security的作用 Spring Security所解决的问题就是安全访问控制，而安全访问控制功能其实就是对所有进入系统的请求进行拦截，校验每个请求是否能够访问它所期望的资源" />
        
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta content="width=device-width, initial-scale=1" name="viewport" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="认证与授权流程与spring boot整合 spring security">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- GLOBAL MANDATORY STYLES -->
    <link href="http://fonts.googleapis.com/css?family=Hind:300,400,500,600,700" rel="stylesheet" type="text/css">
    <link href="/assets/website/js/frontend/vlessgithub/simple-line-icons/css/simple-line-icons.css" rel="stylesheet" type="text/css" />
    <link href="/assets/website/js/frontend/vlessgithub/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- PAGE LEVEL PLUGIN STYLES -->
    <link href="/assets/website/css/vlessgithub/animate.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/vlessgithub/swiper/css/swiper.min.css" rel="stylesheet" type="text/css" />
    <!-- THEME STYLES -->
    <link href="/assets/website/css/vlessgithub/layout.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-X2HXTZV7HY"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-X2HXTZV7HY');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>
<!-- END HEAD -->
<!-- BODY -->

<body id="body" data-spy="scroll" data-target=".header" data-page="detail">
        <!--========== HEADER ==========-->
    <header class="header navbar-fixed-top">
        <!-- Navbar -->
        <nav class="navbar" role="navigation">
            <div class="container">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="menu-container js_nav-item">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".nav-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="toggle-icon"></span>
                    </button>
                    <!-- Logo -->
                    <div class="logo">
                        <a class="logo-wrap" href="/">
                                                <span>Vless Github</span>
                                                </a>
                    </div>
                    <!-- End Logo -->
                </div>
                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse nav-collapse">
                    <div class="menu-container">
                        <ul class="nav navbar-nav navbar-nav-right">
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/">首页</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/free-nodes/">免费节点</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/paid-subscribe/">推荐机场</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/client.htm">客户端</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/news/">新闻资讯</a></li>
                                                    </ul>
                    </div>
                </div>
                <!-- End Navbar Collapse -->
            </div>
        </nav>
        <!-- Navbar -->
    </header>
    <!--========== END HEADER ==========-->
    <!--========== SLIDER ==========-->
    <div class="promo-block category">
        <div class="container">
            <div class="row">
                <div class="col-sm-6 sm-margin-b-60">
                    <div class="margin-b-30">
                        <h1 class="promo-block-title">认证与授权流程与spring boot整合 spring security</h1>
                        <p class="promo-block-text">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="promo-block-img-wrap">
                        <img class="promo-block-img img-responsive" src="/assets/website/img/vlessgithub/mockup/avatar-01.png" align="Avatar">
                    </div>
                </div>
            </div>
            <!--// end row -->
        </div>
    </div>
    <!--========== SLIDER ==========-->
    <!--========== PAGE LAYOUT ==========-->
    <!-- About -->
    <div id="about">
        <div class="container content-lg">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="htmledit_views"> </h1> <h2>1.1 spring security的作用</h2> <div><span style="color:#333333;">Spring Security</span><span style="color:#333333;">所解决的问题就是</span><span style="color:#333333;"><strong>安全访问控制</strong></span><span style="color:#333333;">，而安全访问控</span><span style="color:#fe2c24;"><strong>制功能其实就是对所有进入系统的请求进行拦截，校验每个请求是否能够访问它所期望的资源</strong></span><span style="color:#333333;">。</span></div> <div> <div> <p><span style="color:#333333;">Spring Security对</span><span style="color:#333333;">Web</span><span style="color:#333333;">资源的保护是</span><span style="color:#fe2c24;"><strong>靠Filter实</strong></span><span style="color:#333333;">现的，</span><span style="color:#333333;">当初始化</span><span style="color:#333333;">Spring Security</span><span style="color:#333333;">时，会创建一个名为</span><span style="color:#fe2c24;"><strong>SpringSecurityFilterChain</strong></span><span style="color:#333333;"></span><span style="color:#333333;">的</span><span style="color:#333333;">Servlet</span><span style="color:#333333;">过滤器，类型为org.springframework.security.web.FilterChainProxy，它</span><span style="color:#fe2c24;"><strong>实现了javax.servlet.Filter</strong></span><span style="color:#333333;">，因此外部的请求会经过此 类。如下图所示：</span></p> <p><img fetchpriority="high" decoding="async" alt="" height="512" src="http://img.555519.xyz/uploads3/20220822/51398fdef1dc0661c0f217f9024b5e03.jpg"></p> <div><span style="color:#fe2c24;">FilterChainProxy是一个代理</span><span style="color:#333333;">，真正起作用的是</span><span style="color:#333333;">FilterChainProxy</span><span style="color:#333333;">中</span><span style="color:#333333;">SecurityFilterChain</span><span style="color:#333333;">所包含的各个</span><span style="color:#333333;">Filter</span><span style="color:#333333;">，同时 这些Filter</span><span style="color:#333333;">作为</span><span style="color:#333333;">Bean</span><span style="color:#333333;">被</span><span style="color:#333333;">Spring</span><span style="color:#333333;">管理，它们是</span><span style="color:#333333;">Spring Security</span><span style="color:#333333;">核心，各有各的职责，但他们并不直接处理用户的</span><span style="color:#333333;"><strong>认</strong></span><span style="color:#333333;"><strong>证</strong></span><span style="color:#333333;">，也不直接处理用户的</span><span style="color:#333333;"><strong>授权</strong></span><span style="color:#333333;">，而是把它们交给了认证管理器</span><span style="color:#fe2c24;"><strong>（AuthenticationManager）和决策管理器 （AccessDecisionManager）进行处理</strong></span><span style="color:#333333;">，如下图所示：</span></div> <div><img decoding="async" alt="" height="474" src="http://img.555519.xyz/uploads3/20220822/20393acc7f4f6583f99fe95597d9a755.jpg"></div> <h2>&nbsp;1.2&nbsp;spring security的过滤器的请求过程</h2> <div><span style="color:#333333;">spring Security</span><span style="color:#333333;">功能的实现主要是由一</span><strong><span style="color:#fe2c24;">系列过滤器链</span></strong><span style="color:#333333;">相互配合完成</span></div> <p><img decoding="async" alt="" height="213" src="http://img.555519.xyz/uploads3/20220822/c0f174e030600d1b82d0569a04afdd22.jpg"></p> <div><span style="color:#333333;"><strong>1.SecurityContextPersistenceFilter</strong></span><span style="color:#fe2c24;"><strong>这个Filter是整个拦截过程的入口和出口（也就是第一个和最后一个拦截 器）</strong></span><span style="color:#333333;">，会在请求开始时从配置好的 SecurityContextRepository</span><span style="color:#333333;">中获取</span><span style="color:#333333;">SecurityContext</span><span style="color:#333333;">，然后把它设置给</span><strong><span style="color:#fe2c24;"> SecurityContextHolder</span></strong><span style="color:#333333;">。在请求完成后将</span><span style="color:#333333;">SecurityContextHolder</span><span style="color:#333333;">持有的</span><strong><span style="color:#fe2c24;"> SecurityContext 再保存到配置好 的 SecurityContextRepository</span></strong><span style="color:#333333;">，同时清除</span><span style="color:#fe2c24;">securityContextHolder 所持有的 SecurityContext</span><span style="color:#333333;">；</span></div> <div><span style="color:#333333;">2.</span><span style="color:#333333;"><strong>UsernamePasswordAuthenticationFilter</strong></span><span style="color:#fe2c24;"> 用于处理来自表单提交的认证</span><span style="color:#333333;">。该表单必须提供对应的用户名和密</span><span style="color:#333333;">码，其内部还有登录成功或失败后进行处理的</span><span style="color:#333333;">AuthenticationSuccessHandler</span><span style="color:#333333;">和</span></p> <div><span style="color:#333333;">AuthenticationFailureHandler</span><span style="color:#333333;">，这些都可以根据需求做相关改变；</span></div> </div> <div> <div><span style="color:#333333;"><strong>3.FilterSecurityInterceptor</strong></span><span style="color:#fe2c24;"><strong>是用于保护web资源的，使用AccessDecisionManager对当前用户进行授权访问</strong></span></div> <div><span style="color:#333333;"><strong>4.ExceptionTranslationFilter</strong></span><span style="color:#fe2c24;"><strong>能够捕获来自 FilterChain 所有的异常，并进行处理</strong></span><span style="color:#333333;">。但是它只会处理两类异常：</span><strong><span style="color:#fe2c24;"> AuthenticationException 和 AccessDeniedException，其它的异常它会继续抛出</span></strong><span style="color:#333333;">。</span></div> </div> <h2>&nbsp;1.3&nbsp;spring security认证流程</h2> <h3><span style="color:#333333;">1.3.1<strong>.认证流程</strong></span></h3> </div> </div> <p><img loading="lazy" decoding="async" alt="" height="490" src="http://img.555519.xyz/uploads3/20220822/cc3f94409967b85b63ddd059349e3ba7.jpg"></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">1. 用户提交用户名、密码被SecurityFilterChain中的 UsernamePasswordAuthenticationFilter 过滤器获取到， 封装为请求Authentication，通常情况下是UsernamePasswordAuthenticationToken这个实现类。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">2. 然后过滤器将Authentication提交至认证管理器（AuthenticationManager）进行认证</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">3. 认证成功后， AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息， 身份信息，细节信息，但密码通常会被移除） Authentication 实例。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">4. SecurityContextHolder 安全上下文容器将第3步填充了信息的 Authentication ，通过</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">可以看出AuthenticationManager接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点，它 的实现类为ProviderManager。而Spring Security支持多种认证方式，因此ProviderManager维护着一个 List&lt;AuthenticationProvider&gt; 列表，存放多种认证方式，最终实际的认证工作是由 AuthenticationProvider完成的。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">咱们知道web表单的对应的AuthenticationProvider实现类为</span><span style="color:#fe2c24;">DaoAuthenticationProvider</span><span style="color:#333333;">，它的内部又维护着一个</span><strong><span style="color:#fe2c24;">UserDetailsService负责UserDetails的</span></strong><span style="color:#333333;">获取。最终 AuthenticationProvider将UserDetails填充至Authentication。</span></p> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="552" src="http://img.555519.xyz/uploads3/20220822/e736f3696ef3fc29c01c81474181319f.jpg"></p> <div></div> <div> <div> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#333333;">1.认证管理器（</span><span style="color:#fe2c24;">AuthenticationManager）委托 AuthenticationProvider</span><span style="color:#333333;">完成认证工作</span><span style="color:#fe2c24;"><strong>AuthenticationProvider是一个接口</strong></span><span style="color:#333333;">，如下图</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="150" src="http://img.555519.xyz/uploads3/20220822/69f482d6a569bb6bfed76253e512d081.jpg"></p> </div> </div> <p>&nbsp;在上图中<strong><span style="color:#333333;">authenticate</span></strong><span style="color:#333333;">()方法定义了</span><strong><span style="color:#333333;">认证的实现过程</span></strong><span style="color:#333333;">，它的参数是一个Authentication，里面包含了登录用户所提交的用户、密码等。而返回值也是一Authentication，这个Authentication则是在认证成功后，将用户的权限及其他信息重新组装后生成。</span></p> <p><span style="color:#333333;">2.Spring Security中维护着一个</span><span style="color:#333333;">List&lt;AuthenticationProvider&gt;</span><span style="color:#333333;">列表，存放多种认证方式，不同的认证方式使用不 同的AuthenticationProvider。每个</span><span style="color:#333333;">AuthenticationProvider</span><span style="color:#333333;">需要实现</span><span style="color:#333333;"><strong>supports</strong></span><span style="color:#333333;"><strong>（）</strong></span><span style="color:#333333;">方法来表明自己支持的认证方式，</span></p> <p><img loading="lazy" decoding="async" alt="" height="137" src="http://img.555519.xyz/uploads3/20220822/c140690be11c839c3eff59aa2725b90c.jpg"></p> <div><span style="color:#333333;"><strong>web</strong></span><span style="color:#333333;"><strong>表单提交用户名密码时，</strong></span><span style="color:#333333;"><strong>Spring Security</strong></span><span style="color:#333333;"><strong>由</strong></span><span style="color:#fe2c24;"><strong>DaoAuthenticationProvider处理。</strong></span></div> <div></div> <div> <p style="margin-left:.0001pt;text-align:left;">3.<strong><span style="color:#333333;">Authentication</span></strong><span style="color:#333333;">(认证信息)的结构，它是一个接口，我们之前提到的</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">UsernamePasswordAuthenticationToken</span><span style="color:#333333;">就是它的实现之一：</span></p> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="448" src="http://img.555519.xyz/uploads3/20220822/e5bb479cab0d4aaa22cf69d8df23181e.jpg"></p> <div></div> <div> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">（</span><span style="color:#333333;">1</span><span style="color:#333333;">）</span><span style="color:#333333;">Authentication</span><span style="color:#333333;">是</span><span style="color:#333333;">spring security</span><span style="color:#333333;">包中的接口，</span><span style="color:#fe2c24;">直接继承自Principal类</span><span style="color:#333333;">，而</span><span style="color:#333333;">Principal</span><span style="color:#333333;">是位于</span><span style="color:#333333;">java.security 包中的。它是表示着一个抽象主体身份，任何主体都有一个名称，因此包含一个getName()</span><span style="color:#333333;">方法。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">（</span><span style="color:#333333;">2</span><span style="color:#333333;">）</span><span style="color:#333333;">getAuthorities()</span><span style="color:#333333;">，</span><strong><span style="color:#fe2c24;">权限信息列表</span></strong><span style="color:#333333;">，默认是</span><span style="color:#333333;">GrantedAuthority</span><span style="color:#333333;">接口的一些实现类，通常是代表权限信息的一系 列字符串。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">（</span><span style="color:#333333;">3</span><span style="color:#333333;">）</span><span style="color:#333333;">getCredentials()</span><span style="color:#333333;">，</span><strong><span style="color:#fe2c24;">凭证信息</span></strong><span style="color:#333333;">，用户输入的密码字符串，在认证过后通常会被移除，用于保障安全。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">（</span><span style="color:#333333;">4</span><span style="color:#333333;">）</span><span style="color:#333333;">getDetails()</span><span style="color:#333333;">，</span><span style="color:#fe2c24;">细节信</span><span style="color:#333333;">息，</span><span style="color:#333333;">web</span><span style="color:#333333;">应用中的实现接口通常为</span><span style="color:#333333;">WebAuthenticationDetails</span><span style="color:#333333;">，它记录了访</span><strong><span style="color:#fe2c24;">问者的ip地址和sessionId的值</span></strong><span style="color:#333333;">。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">（</span><span style="color:#333333;">5</span><span style="color:#333333;">）</span><strong><span style="color:#333333;"><strong>getPrincipal()</strong></span></strong><span style="color:#333333;">，</span><span style="color:#fe2c24;">身份信息</span><span style="color:#333333;">，大部分情况下</span><strong><span style="color:#fe2c24;">返回的是UserDetails接口的实现类，UserDetails代表用户的详细 信息</span></strong><span style="color:#333333;">，那从Authentication</span><span style="color:#333333;">中取出来的</span><span style="color:#333333;">UserDetails</span><span style="color:#333333;">就是当前登录用户信息，它也是框架中的常用接口之一。</span></p> <h3 style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">1.3.2<strong>.UserDetailsService</strong></span></h3> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">处理了</span><span style="color:#333333;">web</span><span style="color:#333333;">表单的认证逻辑，认证成功后既得到一个</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">Authentication(UsernamePasswordAuthenticationToken</span><span style="color:#333333;">实现</span><span style="color:#333333;">)</span><span style="color:#333333;">，里面包含了身份信息（</span><span style="color:#333333;">Principal</span><span style="color:#333333;">）。这个身份信息就是一个</span><span style="color:#333333;">Object</span><span style="color:#333333;">，大多数情况下它可以被强转为</span><span style="color:#333333;">UserDetails</span><span style="color:#333333;">对象。</span></p> </div> </div> <div> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">中包含了一个</span><span style="color:#0000ff;">UserDetailsService</span><span style="color:#0000ff;">实</span><span style="color:#333333;">例，它</span><span style="color:#0000ff;">负责根据用户名提取用户信息</span><span style="color:#0000ff;">UserDetails(</span><span style="color:#0000ff;">包含密码</span><span style="color:#0000ff;">)</span><span style="color:#333333;">，而后</span><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">会去对比</span><strong><span style="color:#0000ff;"><strong>UserDetailsService</strong></span></strong><strong><span style="color:#0000ff;"><strong>提取的用户密码与用户提交的密码是否匹配作为认证成功的关键依据</strong></span></strong><span style="color:#333333;">，因此可以通过将自定义的</span><span style="color:#333333;">UserDetailsService</span><span style="color:#333333;">公开为</span><span style="color:#333333;">spring bean</span><span style="color:#333333;">来定义自定义身份验证。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">和</span><span style="color:#333333;">UserDetailsService</span><span style="color:#333333;">的职责搞混淆，其实</span><strong><span style="color:#333333;"><span style="background-color:#4da8ee;">UserDetailsService</span></span></strong><span style="color:#333333;"><strong><span style="background-color:#4da8ee;">只负责从特定的地方（通常是数据库）加载用户信息，仅此而已</span></strong>。而</span><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">的职责</span><span style="color:#fe2c24;">更大，它完成完整的认证流程，同时会把UserDetails填充至Authentication。</span></p> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">UserDetails</span><span style="color:#333333;">是用户信息：</span></p> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="460" src="http://img.555519.xyz/uploads3/20220822/5686fd4a6153b22f379cbe58b27ed8d1.jpg"></p> <div><span style="color:#333333;">Authentication</span><span style="color:#333333;">的</span><span style="color:#333333;">getCredentials()</span><span style="color:#333333;">与 UserDetails中的</span><span style="color:#333333;">getPassword()</span><span style="color:#333333;">需要被区分对待，前者是用户提交的密码凭证，后者是用户实际存储的密码，认证 其实就是对这两者的比对。</span></div> <p><span style="color:#333333;">通过实现</span><span style="color:#333333;">UserDetailsService</span><span style="color:#333333;">和</span><span style="color:#333333;">UserDetails</span><span style="color:#333333;">，</span><span style="color:#fe2c24;"><strong>我们可以完成对用户信息获取方式以及用户信息字段的扩展。</strong></span></p> <div><span style="color:#333333;">Spring Security</span><span style="color:#333333;">提供的</span><span style="color:#fe2c24;"><strong>InMemoryUserDetailsManager(内存认证)，JdbcUserDetailsManager(jdbc认证)就是 UserDetailsService的实现类，主要区别无非就是从内存还是从数据库加载用户。</strong></span></div> <h2 style="margin-left:.0001pt;text-align:left;">1.4&nbsp;spring security的密码器<span style="color:#333333;"><strong>PasswordEncoder</strong></span></h2> <div> <p style="margin-left:.0001pt;text-align:justify;"><span style="color:#333333;">DaoAuthenticationProvider认证处理器通过UserDetailsService获取到UserDetails后，DaoAuthenticationProvider</span><span style="color:#fe2c24;"><strong>通过PasswordEncoder接口的matches方法进行密码的对比</strong></span><span style="color:#333333;">，而具体的密码对比细节取决于实现：</span></p> <p style="margin-left:.0001pt;text-align:justify;"><img loading="lazy" decoding="async" alt="" height="271" src="http://img.555519.xyz/uploads3/20220822/98a3c23812d5fe118db6cb17f7c8a320.jpg"></p> <p>&nbsp;1.<span style="color:#333333;">Spring Security提供很多内置的</span><span style="color:#333333;">PasswordEncoder</span><span style="color:#333333;">，能够开箱即用，使用某种</span><span style="color:#333333;">PasswordEncoder</span><span style="color:#333333;">只需要进行如 下声明即可，如下</span></p> <p><img loading="lazy" decoding="async" alt="" height="117" src="http://img.555519.xyz/uploads3/20220822/fe2e02f579a659957a20ec60050eb60a.jpg"></p> <div><span style="color:#333333;">NoOpPasswordEncoder</span><span style="color:#333333;">的校验规则</span><span style="color:#fe2c24;"><strong>拿 输入的密码和UserDetails中的正确密码进行字符串比较</strong></span><span style="color:#333333;">，字符串内容一致 则校验通过，否则 校验失败。</span><span style="color:#fe2c24;"><strong>采用字符串匹配方法，</strong></span><span style="color:#333333;">不对密码进行加密比较处理，密码比较流程如下：</span></p> <div><span style="color:#333333;">1</span><span style="color:#333333;">、用户输入密码（明文 ）</span></div> <div><span style="color:#333333;">2</span><span style="color:#333333;">、</span><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">获取</span><span style="color:#333333;">UserDetails</span><span style="color:#333333;">（其中存储了用户的正确密码）</span></div> <div><span style="color:#333333;">3</span><span style="color:#333333;">、</span><span style="color:#333333;">DaoAuthenticationProvider</span><span style="color:#333333;">使用</span><span style="color:#333333;">PasswordEncoder</span><span style="color:#333333;">对输入的密码和正确的密码进行校验，密码一致则校验通 过，否则校验失败。</span></div> <p style="margin-left:.0001pt;text-align:left;"><span style="color:#333333;">实际项目中推荐使用</span><span style="color:#333333;">BCryptPasswordEncoder,Pbkdf2PasswordEncoder,SCryptPasswordEncoder</span><span style="color:#333333;">等，感兴趣 的大家可以看看这些PasswordEncoder的具体实现。</span></p> </div> </div> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="208" src="http://img.555519.xyz/uploads3/20220822/33848a3f701357ea2f1a803a67f615f4.jpg"></p> <p>2.编写一个test类</p> <pre><code>package com.ljf.spt.security;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.security.crypto.bcrypt.BCrypt; import org.springframework.test.context.junit4.SpringRunner;  /**  * @author Administrator  * @version 1.0  **/ @RunWith(SpringRunner.class) public class TestBCrypt {      @Test     public void testBCrypt(){          //对密码进行加密         String hashpw = BCrypt.hashpw("456", BCrypt.gensalt());         System.out.println(hashpw);          //校验密码         boolean checkpw = BCrypt.checkpw("123", "$2a$10$aFsOFzujtPCnUCUKcozsHux0rQ/3faAHGFSVb9Y.B1ntpmEhjRtru");         boolean checkpw2 = BCrypt.checkpw("123", "$2a$10$HuClcUqr/FSLmzSsp9SHqe7D51Keu1sAL7tUAAcb..FyILiLdFKYy");         System.out.println("test1:"+checkpw);         System.out.println("test2:"+checkpw2);     } }</code></pre> <p>&nbsp;执行结果：</p> <p><img loading="lazy" decoding="async" alt="" height="338" src="http://img.555519.xyz/uploads3/20220822/f723ce4a3c878e823e1a813f8cab5886.jpg"></p> <h2>1.5&nbsp;spring security的授权</h2> <h3>1.5.1 授权流程</h3> <div><span style="color:#333333;">Spring Security</span><span style="color:#333333;">可以通过</span><span style="color:#fe2c24;"><strong>http.authorizeRequests() 对web请求进行授权保护</strong></span><span style="color:#333333;">。</span></div> <div><span style="color:#333333;">Spring Security使用标</span><strong><span style="color:#fe2c24;">准Filter建立了对web请求的拦截，最终实现对资源的授权访问</span></strong><span style="color:#333333;">。</span></div> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="529" src="http://img.555519.xyz/uploads3/20220822/a5999c44d3fbf8529c0ebe4b4ead55bb.jpg"></p> <p>&nbsp;流程如下：</p> <div><span style="color:#333333;">1.</span><strong><span style="color:#333333;">拦截请求</span></strong><span style="color:#333333;">，已认证用户访问受保护的web资源将被SecurityFilterChain中的</span><span style="color:#fe2c24;"><strong>FilterSecurityInterceptor 的子 类拦截</strong></span><span style="color:#333333;">。</span></div> <div> <div><span style="color:#333333;">2.</span><span style="color:#333333;"><strong>获取资源访问策略</strong></span><span style="color:#333333;">，</span><span style="color:#333333;">FilterSecurityInterceptor</span><span style="color:#333333;">会从</span><span style="color:#fe2c24;"><strong>SecurityMetadataSource</strong></span><span style="color:#333333;">的子类</span></div> <div><strong><span style="color:#fe2c24;">DefaultFilterInvocationSecurityMetadataSource</span></strong><span style="color:#333333;">获取</span><span style="color:#fe2c24;">要访问当前资源所需要的权限</span></div> <div><span style="color:#fe2c24;">Collection&lt;ConfigAttribute&gt; 。</span></div> <div><span style="color:#333333;">SecurityMetadataSource</span><span style="color:#333333;">其实就是读取访问策略的抽象，而读取的内容，其实就是我们配置的访问规则， 读 取访问策略如</span></div> <div><img loading="lazy" decoding="async" alt="" height="148" src="http://img.555519.xyz/uploads3/20220822/239f750e0248528b3a3d3df162a3a272.jpg"></div> <p>&nbsp;3.<span style="color:#333333;">最后，FilterSecurityInterceptor</span><span style="color:#333333;">会调</span><span style="color:#fe2c24;"><strong>用 AccessDecisionManager 进行授权决策</strong></span><span style="color:#333333;">，若决策通过，则允许访问资 源，否则将禁止访问。</span></p> <div><span style="color:#333333;">AccessDecisionManager</span><span style="color:#333333;">（访问决策管理器）的核心接口如下</span><span style="color:#333333;">:</span></div> </div> <p style="margin-left:.0001pt;text-align:left;"><img loading="lazy" decoding="async" alt="" height="243" src="http://img.555519.xyz/uploads3/20220822/f8287640afe504897b2e6ff328f92a67.jpg"></p> <div><span style="color:#333333;">重说明一下</span><span style="color:#333333;">decide</span><span style="color:#333333;">的参数：</span></div> <div><span style="color:#333333;">1.authentication</span><span style="color:#333333;">：要访问资源的访问者的身份</span></div> <div><span style="color:#333333;">2.object</span><span style="color:#333333;">：要访问的受保护资源，</span><span style="color:#333333;">web</span><span style="color:#333333;">请求对应</span><span style="color:#333333;">FilterInvocation</span></div> <div><span style="color:#333333;">3.confifigAttributes</span><span style="color:#333333;">：是受保护资源的访问策略，通过</span><span style="color:#333333;">SecurityMetadataSource</span><span style="color:#333333;">获取。</span></div> <p><span style="color:#333333;"><strong>decide</strong></span><span style="color:#333333;"><strong>接口就是用</strong></span><span style="color:#fe2c24;"><strong>来鉴定当前用户是否有访问对应受保护资源的权限。</strong></span></p> <h3>1.5.2&nbsp;授权策略</h3> <div><span style="color:#fe2c24;"><strong>AccessDecisionManager采用投票的</strong></span><span style="color:#333333;">方式来确定是否能够访问受保护资源</span></div> <p><img loading="lazy" decoding="async" alt="" height="320" src="http://img.555519.xyz/uploads3/20220822/a499f0d7a411537d7a7d67afa67ffd32.jpg"></p> <div><span style="color:#333333;">通过上图可以看出，</span><span style="color:#333333;">AccessDecisionManager</span><span style="color:#333333;">中包含的一系列</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">将会被用来对</span><span style="color:#333333;">Authentication 是否有权访问受保护对象进行投票，AccessDecisionManager</span><span style="color:#333333;">根据投票结果，做出最终决策。</span></div> <div> <div><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">是一个接口，其中定义有三个方法，具体结构如下所示。</span></div> </div> <p><img loading="lazy" decoding="async" alt="" height="326" src="http://img.555519.xyz/uploads3/20220822/2906dd935f55a53c7939d50df9046b0b.jpg"></p> <p><span style="color:#333333;">vote()</span><span style="color:#333333;">方法的返回结果会是</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">中定义的三个常量之一。</span></p> <div><span style="color:#333333;">ACCESS_GRANTED</span><span style="color:#333333;">表示同意，</span></div> <div><span style="color:#333333;">ACCESS_DENIED</span><span style="color:#333333;">表示拒绝，</span></div> <div><span style="color:#333333;">ACCESS_ABSTAIN</span><span style="color:#333333;">表示弃权。</span></div> <div><span style="color:#333333;">如果一个</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">不能判定当前 Authentication是否拥有访问对应受保护对象的权限，则其</span><span style="color:#333333;">vote()</span><span style="color:#333333;">方法的返回值应当为弃权</span><span style="color:#333333;">ACCESS_ABSTAIN</span><span style="color:#333333;">。</span></div> <h3><span style="color:#333333;">1.5.3 投票类</span></h3> <div> <div><span style="color:#333333;">Spring Security</span><span style="color:#333333;">内置了三个基于投票的</span><span style="color:#333333;">AccessDecisionManager</span><span style="color:#333333;">实现类如下，它们分别是</span></div> <div><span style="color:#333333;"><strong>AffirmativedBased</strong></span><span style="color:#333333;">、</span><span style="color:#333333;"><strong>ConsensusBased</strong></span><span style="color:#333333;">和</span><span style="color:#333333;"><strong>UnanimousBased</strong></span></div> <div><span style="color:#333333;"><strong>1.AffirmativedBased</strong>的逻辑是：</span></p> <div><span style="color:#333333;">（</span><span style="color:#333333;">1</span><span style="color:#333333;">）</span><span style="color:#a2e043;">只要有AccessDecisionVoter的投票为ACCESS_GRANTED则同意用户进行访问；</span></div> <div><span style="color:#a2e043;">（2）如果全部弃权也表示通过；</span></div> <div><span style="color:#a2e043;">（3）如果没有一个人投赞成票</span><span style="color:#333333;">，</span><span style="color:#fe2c24;">但是有人投反对票，则将抛出AccessDeniedException。</span></div> <div><strong><span style="color:#fe2c24;">Spring security默认使用的是AffirmativedBased</span></strong></div> </div> </div> <div><span style="color:#333333;"><strong>2. ConsensusBased</strong></span><span style="color:#333333;">的逻辑是：</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">1</span><span style="color:#333333;">）如果赞成票多于反对票则表示通过。</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">2</span><span style="color:#333333;">）反过来，如果反对票多于赞成票则将抛出</span><span style="color:#333333;">AccessDeniedException</span><span style="color:#333333;">。</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">3</span><span style="color:#333333;">）如果赞成票与反对票相同且不等于</span><span style="color:#333333;">0</span><span style="color:#333333;">，并且属性</span><span style="color:#333333;">allowIfEqualGrantedDeniedDecisions</span><span style="color:#333333;">的值为</span><span style="color:#333333;">true</span><span style="color:#333333;">，则表 示通过，否则将抛出异常AccessDeniedException</span><span style="color:#333333;">。</span></div> <div><span style="color:#fe2c24;"><strong>参数allowIfEqualGrantedDeniedDecisions的值默认为true。</strong></span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">4</span><span style="color:#333333;">）如果所有的</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">都弃权了，则将视参数</span><span style="color:#333333;">allowIfAllAbstainDecisions</span><span style="color:#333333;">的值而定，如果该值</span></div> <div><span style="color:#333333;">为</span><span style="color:#333333;">true</span><span style="color:#333333;">则表示通过，否则将抛出异常</span><span style="color:#333333;">AccessDeniedException</span><span style="color:#333333;">。参数</span><span style="color:#333333;">allowIfAllAbstainDecisions</span><span style="color:#333333;">的值默认为</span><span style="color:#333333;">false</span><span style="color:#333333;">。</span></div> <div> <div><span style="color:#333333;"><strong>3.UnanimousBased</strong></span><span style="color:#333333;">的逻辑与另外两种实现有点不一样，另外两种会一次性把受保护对象的配置属性全部传递</span></div> <div><span style="color:#333333;">给</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">进行投票，而</span><span style="color:#333333;">UnanimousBased</span><span style="color:#333333;">会一次只传递一个</span><span style="color:#333333;">ConfifigAttribute</span><span style="color:#333333;">给</span></div> <div><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">进行投票。这也就意味着如果我们的</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">的逻辑是只要传递进来的</span></div> <div><span style="color:#333333;">ConfifigAttribute</span><span style="color:#333333;">中有一个能够匹配则投赞成票，但是放到</span><span style="color:#333333;">UnanimousBased</span><span style="color:#333333;">中其投票结果就不一定是赞成了。</span></div> <div><span style="color:#333333;">UnanimousBased</span><span style="color:#333333;">的逻辑具体来说是这样的：</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">1</span><span style="color:#333333;">）如果受保护对象配置的某一个</span><span style="color:#333333;">ConfifigAttribute</span><span style="color:#333333;">被任意的</span><span style="color:#333333;">AccessDecisionVoter</span><span style="color:#333333;">反对了，则将抛出</span></div> <div><span style="color:#333333;">AccessDeniedException</span><span style="color:#333333;">。</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">2</span><span style="color:#333333;">）如果没有反对票，但是有赞成票，则表示通过。</span></div> <div><span style="color:#333333;">（</span><span style="color:#333333;">3</span><span style="color:#333333;">）如果全部弃权了，则将视参数</span><span style="color:#333333;">allowIfAllAbstainDecisions</span><span style="color:#333333;">的值而定，</span><span style="color:#333333;">true</span><span style="color:#333333;">则通过，</span><span style="color:#333333;">false</span><span style="color:#333333;">则抛出</span></div> <div><span style="color:#333333;">AccessDeniedException</span><span style="color:#333333;">。</span></div> <div> <div><span style="color:#333333;">Spring Security</span><span style="color:#333333;">也内置一些投票者实现类如</span><span style="color:#333333;"><strong>RoleVoter</strong></span><span style="color:#333333;">、</span><span style="color:#333333;"><strong>AuthenticatedVoter</strong></span><span style="color:#333333;">和</span><span style="color:#333333;"><strong>WebExpressionVoter</strong></span><span style="color:#333333;">等，可以 自行查阅资料进行学习。</span></div> </div> </div> </div> </h1> <h2>2.1 工程结构</h2> <p><strong><span style="color:#fe2c24;">spring security内嵌了自己的登录页面</span></strong></p> <p><img loading="lazy" decoding="async" alt="" height="604" src="http://img.555519.xyz/uploads3/20220822/f6b90424f489a99417bd70b9dda93e4d.jpg"></p> <h2>2.2&nbsp;配置pom文件</h2> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.ljf.spt.security&lt;/groupId&gt;   &lt;artifactId&gt;spt-security-demo&lt;/artifactId&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!-- springboot-parent --&gt;   &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;   &lt;/parent&gt;   &lt;name&gt;spt-security-demo&lt;/name&gt;   &lt;!-- FIXME change it to the project's website --&gt;   &lt;url&gt;http://www.example.com&lt;/url&gt;    &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;     &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;   &lt;/properties&gt;    &lt;dependencies&gt;     &lt;dependency&gt;       &lt;groupId&gt;junit&lt;/groupId&gt;       &lt;artifactId&gt;junit&lt;/artifactId&gt;       &lt;version&gt;4.13&lt;/version&gt;       &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- 以下是&gt;spring boot依赖--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;!-- 以下是&gt;spring security依赖--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     &lt;/dependency&gt;       &lt;!-- 以下是jsp依赖--&gt;     &lt;dependency&gt;       &lt;groupId&gt;javax.servlet&lt;/groupId&gt;       &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;       &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!--jsp页面使用jstl标签 --&gt;     &lt;dependency&gt;       &lt;groupId&gt;javax.servlet&lt;/groupId&gt;       &lt;artifactId&gt;jstl&lt;/artifactId&gt;       &lt;version&gt;1.2&lt;/version&gt;       &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;      &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;       &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!--用于编译jsp --&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;       &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;       &lt;version&gt;9.0.39&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;       &lt;artifactId&gt;lombok&lt;/artifactId&gt;       &lt;version&gt;1.18.0&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;       &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;      &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;       &lt;groupId&gt;mysql&lt;/groupId&gt;       &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;       &lt;version&gt;5.1.47&lt;/version&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;    &lt;build&gt;     &lt;plugins&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;         &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;         &lt;version&gt;2.2&lt;/version&gt;       &lt;/plugin&gt;       &lt;plugin&gt;         &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;         &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;source&gt;1.8&lt;/source&gt;           &lt;target&gt;1.8&lt;/target&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;        &lt;plugin&gt;         &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;         &lt;configuration&gt;           &lt;encoding&gt;utf-8&lt;/encoding&gt;           &lt;useDefaultDelimiters&gt;true&lt;/useDefaultDelimiters&gt;           &lt;resources&gt;             &lt;resource&gt;               &lt;directory&gt;src/main/resources&lt;/directory&gt;               &lt;filtering&gt;true&lt;/filtering&gt;               &lt;includes&gt;                 &lt;include&gt;**/*&lt;/include&gt;               &lt;/includes&gt;             &lt;/resource&gt;             &lt;resource&gt;               &lt;directory&gt;src/main/java&lt;/directory&gt;               &lt;includes&gt;                 &lt;include&gt;**/*.xml&lt;/include&gt;               &lt;/includes&gt;             &lt;/resource&gt;           &lt;/resources&gt;         &lt;/configuration&gt;       &lt;/plugin&gt;     &lt;/plugins&gt;   &lt;/build&gt; &lt;/project&gt;</code></pre> <h2>2.3&nbsp; spring容器的配置</h2> <div><span style="color:#333333;">SpringBoot</span><span style="color:#333333;">工程启动会自动扫描启动类所在包下的所有</span><span style="color:#333333;">Bean</span><span style="color:#333333;">，加载到</span><span style="color:#333333;">spring</span><span style="color:#333333;">容器。</span></div> <div><span style="color:#333333;">将springmvc中的applicationConfig.java在spring boot项目改成了application.properties配置文件进行配置相关操作。</span></div> <h3><span style="color:#333333;">2.3.1&nbsp;Spring Boot</span><span style="color:#333333;">配置文件</span></h3> <p><span style="color:#333333;">在</span><span style="color:#333333;">resources</span><span style="color:#333333;">下添加</span><span style="color:#333333;">application.properties</span><span style="color:#333333;">，内容如下：</span></p> <pre><code>#基本配置 server.port=8080 server.servlet.context-path=/spt-security spring.application.name =springboot-security #视图 spring.mvc.view.prefix=/WEB-INF/view/ spring.mvc.view.suffix=.jsp #mysql spring.datasource.url=jdbc:mysql://localhost:3306/user_db spring.datasource.username=root spring.datasource.password=mysql spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code></pre> <h3><span style="color:#333333;">2.3.2&nbsp;配置启动类</span></h3> <pre><code>@SpringBootApplication public class App  {     public static void main( String[] args )     {         SpringApplication.run(App.class,args);         System.out.println("启动完成!!!");     } }</code></pre> <h2>2.4&nbsp; web.config的配置</h2> <div><span style="color:#333333;">由于</span><span style="color:#333333;">Spring boot starter</span><span style="color:#333333;">自动装配机制，这里无需使用</span><span style="color:#333333;">@EnableWebMvc</span><span style="color:#333333;">与</span><span style="color:#333333;">@ComponentScan</span><span style="color:#333333;">，</span><span style="color:#333333;">WebConfifig</span><span style="color:#333333;">如下</span></div> <pre><code>@Configuration//就相当于springmvc.xml文件 public class WebConfig implements WebMvcConfigurer {       @Override     public void addViewControllers(ViewControllerRegistry registry) {         registry.addViewController("/").setViewName("login");     }  }</code></pre> <h2>2.5&nbsp; 安全配置文件<span style="color:#0000ff;">WebSecurityConfig.</span>config的配置</h2> <div><span style="color:#333333;">由于</span><span style="color:#333333;">Spring boot starter</span><span style="color:#333333;">自动装配机制，这里无需使用</span><span style="color:#333333;">@EnableWebSecurity</span><span style="color:#333333;">，</span><span style="color:#333333;">WebSecurityConfifig</span><span style="color:#333333;">内容如下</span></div> <div> <pre><code>package com.ljf.spt.security.config;  import org.springframework.context.annotation.Bean; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.password.NoOpPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.security.provisioning.InMemoryUserDetailsManager;  /**  * @author Administrator  * @version 1.0  **/ //@EnableWebSecurity @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter {      //1.定义用户信息服务（查询用户信息）     @Bean     public UserDetailsService userDetailsService(){         InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();         manager.createUser(User.withUsername("zhangsan").password("123").authorities("p1").build());         manager.createUser(User.withUsername("lisi").password("456").authorities("p2").build());         return manager;     }      //2.密码编码器     @Bean     public PasswordEncoder passwordEncoder(){         return NoOpPasswordEncoder.getInstance();     }      //3.安全拦截机制（最重要）     @Override     protected void configure(HttpSecurity http) throws Exception {         http.authorizeRequests()                 .antMatchers("/user/r1").hasAuthority("p1") //p1角色具有访问/user/r1读取权限                 .antMatchers("/user/r2").hasAuthority("p2")  //p2角色具有访问/user/r2读取权限                 .antMatchers("/user/**").authenticated()//所有/user/**的请求必须认证通过                 .anyRequest().permitAll()//除了/user/**，其它的请求可以不经过认证，就可以访问                 .and()                 .formLogin()//允许表单登录                 .successForwardUrl("/login-success");//自定义登录成功的页面地址，登录成功跳转的地址      } }</code></pre> <h2>2.6&nbsp; controller</h2> <pre><code>     @RequestMapping(value = "/login-success",produces = {"text/plain;charset=UTF-8"})     public String loginSuccess(){         //提示具体用户名称登录成功         return getUsername()+" 登录成功";     }</code></pre> <h2>2.7 测试</h2> <p>注意这是springboot启动方式不用在tomcat方式下启动：直接运行springboot的启动入口程序就行，如下图：</p> <p><img loading="lazy" decoding="async" alt="" height="862" src="http://img.555519.xyz/uploads3/20220822/a3def7f3c653d108c8f9a7ce39914f65.jpg"></p> <p>&nbsp;如果启动tomcat，则报404</p> <p><img loading="lazy" decoding="async" alt="" height="595" src="http://img.555519.xyz/uploads3/20220822/ce4d613c222aa541d8734af3c19c58d0.jpg"></p> <p>1. 未登录</p> <p>访问资源r1，跳转到登录页面</p> <p><img loading="lazy" decoding="async" alt="" height="471" src="http://img.555519.xyz/uploads3/20220822/d7968316515cc38fb5bc6fe8922b38bc.jpg"></p> <p>&nbsp;访问资源r2，跳转到登录页面</p> <p><img loading="lazy" decoding="async" alt="" height="417" src="http://img.555519.xyz/uploads3/20220822/2b89d0d1f2de682314e861c9e36b0e39.jpg"></p> <p>2.登录情况</p> <p><img loading="lazy" decoding="async" alt="" height="221" src="http://img.555519.xyz/uploads3/20220822/c1764541d0f9a780bb4d3e132b6b8b5c.jpg"></p> <p>&nbsp;访问资源1：</p> <p><img loading="lazy" decoding="async" alt="" height="110" src="http://img.555519.xyz/uploads3/20220822/daf1557afd38733f187eac38e0204bd8.jpg"></p> <p>访问资源2：</p> <p><img loading="lazy" decoding="async" alt="" height="251" src="http://img.555519.xyz/uploads3/20220822/608e2560c9d60e5d51f36d1cf2a2eb12.jpg"></p> <p>总结：</p> <p><strong>1、未登录成功时，访问/user/r1和/user/r2，均跳转到登录页面，进行认证登录</strong></p> <p><strong>2、登录成功时，访问/user/r1和/user/r2，有权限时则正常访问，否则返回403（拒绝访问）</strong></p> </div> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-105162.htm">动物医院有公立的吗还是私立的好呢知乎（动物医院有限公司）</a></p>
                                        <p>下一个：<a href="/news/article-105982.htm">成立宠物食品公司需要什么资质（成立宠物食品公司需要什么资质要求）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-98288.htm" title="mysql 中插入百万条数据">mysql 中插入百万条数据</a></li>
                        <li class="py-2"><a href="/news/article-93051.htm" title="阿城区王允海动物医院电话是多少号（王允海动物医院道里店怎么样）">阿城区王允海动物医院电话是多少号（王允海动物医院道里店怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-96825.htm" title="SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析(下)_在线工具">SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析(下)_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-vless-github.htm" title="「3月28日」最高速度20.5M/S，2025年Vless每天更新免费机场节点地址链接">「3月28日」最高速度20.5M/S，2025年Vless每天更新免费机场节点地址链接</a></li>
                        <li class="py-2"><a href="/news/article-83587.htm" title="上海有什么宠物救助机构（上海有宠物救助中心吗）">上海有什么宠物救助机构（上海有宠物救助中心吗）</a></li>
                        <li class="py-2"><a href="/news/article-98960.htm" title="动物医院申请条件有哪些内容呢英语怎么说（符合动物医院法定条件）">动物医院申请条件有哪些内容呢英语怎么说（符合动物医院法定条件）</a></li>
                        <li class="py-2"><a href="/news/article-105978.htm" title="认证与授权流程与spring boot整合 spring security">认证与授权流程与spring boot整合 spring security</a></li>
                        <li class="py-2"><a href="/news/article-100540.htm" title="flex卡片布局（随屏幕自适应）">flex卡片布局（随屏幕自适应）</a></li>
                        <li class="py-2"><a href="/news/article-103519.htm" title="卖宠物粮食的公司叫什么名字来着好听（卖宠物粮食的上市公司）">卖宠物粮食的公司叫什么名字来着好听（卖宠物粮食的上市公司）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-vless-windows.htm" title="「3月7日」最高速度18.4M/S，2025年Vless每天更新免费机场节点地址链接">「3月7日」最高速度18.4M/S，2025年Vless每天更新免费机场节点地址链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">79</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
            <!--// end row -->
        </div>
    </div>
    <!-- End About -->
    <!--========== END PAGE LAYOUT ==========-->
        <!--========== FOOTER ==========-->
    <footer class="footer">
        <div class="content container">
            <div class="row">
                <div class="col-xs-12 text-center">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p class="margin-b-0">Vless Github机场订阅官网 版权所有 Powered by WordPress</p>
                </div>
            </div>
            <!--// end row -->
        </div>
    </footer>
    <!--========== END FOOTER ==========-->
    <!-- Back To Top -->
    <a href="javascript:void(0);" class="js-back-to-top back-to-top">Top</a>
    <!-- JAVASCRIPTS(Load javascripts at bottom, this will reduce page load time) -->
    <!-- CORE PLUGINS -->
    <script src="/assets/website/js/frontend/vlessgithub/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery-migrate.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS -->
    <script src="/assets/website/js/frontend/vlessgithub/jquery.easing.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery.back-to-top.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery.smooth-scroll.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery.wow.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery.parallax.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/jquery.appear.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/swiper/js/swiper.jquery.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL SCRIPTS -->
    <script src="/assets/website/js/frontend/vlessgithub/layout.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/components/progress-bar.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/components/swiper.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/vlessgithub/components/wow.min.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>
<!-- END BODY -->

</html>